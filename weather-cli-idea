import argparse
import requests
from datetime import datetime
import json
import os
from typing import Dict, Optional

class WeatherCLI:
    def __init__(self, api_key: Optional[str] = None):
        """Initialize WeatherCLI with optional API key."""
        self.api_key = api_key or os.getenv('OPENWEATHER_API_KEY')
        if not self.api_key:
            raise ValueError("API key must be provided or set in OPENWEATHER_API_KEY environment variable")
        
        self.base_url = "http://api.openweathermap.org/data/2.5/weather"

    def get_weather(self, city: str) -> Dict:
        """Fetch weather data for a given city."""
        params = {
            'q': city,
            'appid': self.api_key,
            'units': 'metric'  # Use metric units
        }
        
        response = requests.get(self.base_url, params=params)
        response.raise_for_status()
        return response.json()

    def format_weather_data(self, data: Dict) -> str:
        """Format weather data into a readable string."""
        weather = data['weather'][0]['description']
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        humidity = data['main']['humidity']
        wind_speed = data['wind']['speed']
        
        return f"""
Weather in {data['name']} ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')}):
🌡️  Temperature: {temp}°C
🌊 Feels like: {feels_like}°C
☁️  Conditions: {weather}
💧 Humidity: {humidity}%
💨 Wind Speed: {wind_speed} m/s
"""

def main():
    parser = argparse.ArgumentParser(description='Get current weather for a city')
    parser.add_argument('city', help='Name of the city to get weather for')
    parser.add_argument('--api-key', help='OpenWeather API key (optional if set in environment)')
    
    args = parser.parse_args()
    
    try:
        weather_cli = WeatherCLI(args.api_key)
        weather_data = weather_cli.get_weather(args.city)
        print(weather_cli.format_weather_data(weather_data))
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 404:
            print(f"Error: City '{args.city}' not found")
        else:
            print(f"Error fetching weather data: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()